# CONTEXT
You will be given a CodeQL query, CPP snippet, the containing source file, and a filter.

The CPP snippet was retrieved using the CodeQL query, a language used for static analysis. You don't have to understand the syntax of the language, but you should be able to understand the structure of the code.

# INSTRUCTION
Given the filter, determine if the source file matches the filter (1) or not (0).

# OUTPUT
Return a JSON of the following format.
{
    "explanation": <str>,
    "is_filtered": <1 or 0>
}

ONLY RETURN JSON. DO NOT PRINT ANYTHING ELSE.

# INPUT

## CodeQL Query
import cpp

class BufferVkBufferAccessCall extends FunctionCall {
  BufferVkBufferAccessCall() {
    this.getType().getName() = "BufferHelper &" and
    this.getTarget().getDeclaringType().getQualifiedName() = "rx::BufferVk"
  }
}

from AssignExpr e, BufferVkBufferAccessCall fc, FieldAccess fa
where
  fc.getEnclosingStmt().(ExprStmt).getExpr() = e and
  (
    e.getRValue().(AddressOfExpr).getOperand() = fc
    or
    e.getRValue() = fc
  ) and
  fa.getEnclosingStmt().(ExprStmt).getExpr() = e
select fc,
  "BufferVk::mBuffer is accessed through a function call to $@. The result is assigned to $@::$@.",
  fc.getTarget(), fc.getTarget().getName(), fa.getTarget().getDeclaringType(),
  fa.getTarget().getDeclaringType().getName(), fa.getTarget(), fa.getTarget().getName()

## CPP Snippet
```cpp
L66:             mBufferHelpers[bufferIndex] = &bufferVk->getBufferAndOffset(&bufferOffset);
```

## Source File
L1: //
L2: // Copyright 2016 The ANGLE Project Authors. All rights reserved.
L3: // Use of this source code is governed by a BSD-style license that can be
L4: // found in the LICENSE file.
L5: //
L6: // TransformFeedbackVk.cpp:
L7: //    Implements the class methods for TransformFeedbackVk.
L8: //
L9: #include "libANGLE/renderer/vulkan/TransformFeedbackVk.h"
L10: #include "libANGLE/Context.h"
L11: #include "libANGLE/Query.h"
L12: #include "libANGLE/renderer/glslang_wrapper_utils.h"
L13: #include "libANGLE/renderer/vulkan/BufferVk.h"
L14: #include "libANGLE/renderer/vulkan/ContextVk.h"
L15: #include "libANGLE/renderer/vulkan/FramebufferVk.h"
L16: #include "libANGLE/renderer/vulkan/ProgramVk.h"
L17: #include "libANGLE/renderer/vulkan/QueryVk.h"
L18: #include "common/debug.h"
L19: namespace rx
L20: {
L21: TransformFeedbackVk::TransformFeedbackVk(const gl::TransformFeedbackState &state)
L22:     : TransformFeedbackImpl(state),
L23:       mRebindTransformFeedbackBuffer(false),
L24:       mBufferHelpers{},
L25:       mBufferHandles{},
L26:       mBufferOffsets{},
L27:       mBufferSizes{},
L28:       mAlignedBufferOffsets{},
L29:       mCounterBufferHandles{}
L30: {
L31:     for (angle::SubjectIndex bufferIndex = 0;
L32:          bufferIndex < gl::IMPLEMENTATION_MAX_TRANSFORM_FEEDBACK_BUFFERS; ++bufferIndex)
L33:     {
L34:         mBufferObserverBindings.emplace_back(this, bufferIndex);
L35:     }
L36: }
L37: TransformFeedbackVk::~TransformFeedbackVk() {}
L38: void TransformFeedbackVk::onDestroy(const gl::Context *context)
L39: {
L40:     ContextVk *contextVk   = vk::GetImpl(context);
L41:     RendererVk *rendererVk = contextVk->getRenderer();
L42:     releaseCounterBuffers(rendererVk);
L43: }
L44: void TransformFeedbackVk::releaseCounterBuffers(RendererVk *renderer)
L45: {
L46:     for (vk::BufferHelper &bufferHelper : mCounterBufferHelpers)
L47:     {
L48:         bufferHelper.release(renderer);
L49:     }
L50:     for (VkBuffer &buffer : mCounterBufferHandles)
L51:     {
L52:         buffer = VK_NULL_HANDLE;
L53:     }
L54: }
L55: void TransformFeedbackVk::initializeXFBBuffersDesc(ContextVk *contextVk, size_t xfbBufferCount)
L56: {
L57:     mXFBBuffersDesc.reset();
L58:     for (size_t bufferIndex = 0; bufferIndex < xfbBufferCount; ++bufferIndex)
L59:     {
L60:         const gl::OffsetBindingPointer<gl::Buffer> &binding = mState.getIndexedBuffer(bufferIndex);
L61:         ASSERT(binding.get());
L62:         BufferVk *bufferVk = vk::GetImpl(binding.get());
L63:         if (bufferVk->isBufferValid())
L64:         {
L65:             VkDeviceSize bufferOffset   = 0;
L66:             mBufferHelpers[bufferIndex] = &bufferVk->getBufferAndOffset(&bufferOffset);
L67:             mBufferOffsets[bufferIndex] = binding.getOffset() + bufferOffset;
L68:             mBufferSizes[bufferIndex]   = gl::GetBoundBufferAvailableSize(binding);
L69:             mBufferObserverBindings[bufferIndex].bind(bufferVk);
L70:         }
L71:         else
L72:         {
L73:             // This can happen in error conditions.
L74:             vk::BufferHelper &nullBuffer = contextVk->getEmptyBuffer();
L75:             mBufferHelpers[bufferIndex]  = &nullBuffer;
L76:             mBufferOffsets[bufferIndex]  = 0;
L77:             mBufferSizes[bufferIndex]    = nullBuffer.getSize();
L78:             mBufferObserverBindings[bufferIndex].reset();
L79:         }
L80:         mXFBBuffersDesc.updateTransformFeedbackBuffer(
L81:             bufferIndex, mBufferHelpers[bufferIndex]->getBufferSerial(),
L82:             mBufferOffsets[bufferIndex]);
L83:     }
L84: }
L85: angle::Result TransformFeedbackVk::begin(const gl::Context *context,
L86:                                          gl::PrimitiveMode primitiveMode)
L87: {
L88:     ContextVk *contextVk = vk::GetImpl(context);
L89:     const gl::ProgramExecutable *executable = contextVk->getState().getProgramExecutable();
L90:     ASSERT(executable);
L91:     size_t xfbBufferCount = executable->getTransformFeedbackBufferCount();
L92:     initializeXFBBuffersDesc(contextVk, xfbBufferCount);
L93:     for (size_t bufferIndex = 0; bufferIndex < xfbBufferCount; ++bufferIndex)
L94:     {
L95:         const gl::OffsetBindingPointer<gl::Buffer> &binding = mState.getIndexedBuffer(bufferIndex);
L96:         mBufferHandles[bufferIndex] = mBufferHelpers[bufferIndex]->getBuffer().getHandle();
L97:         if (contextVk->getFeatures().supportsTransformFeedbackExtension.enabled)
L98:         {
L99:             if (mCounterBufferHandles[bufferIndex] == VK_NULL_HANDLE)
L100:             {
L101:                 VkBufferCreateInfo createInfo = {};
L102:                 createInfo.sType              = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
L103:                 createInfo.size               = 16;
L104:                 createInfo.usage       = VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT;
L105:                 createInfo.sharingMode = VK_SHARING_MODE_EXCLUSIVE;
L106:                 vk::BufferHelper &bufferHelper = mCounterBufferHelpers[bufferIndex];
L107:                 ANGLE_TRY(
L108:                     bufferHelper.init(contextVk, createInfo, VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT));
L109:                 mCounterBufferHandles[bufferIndex] = bufferHelper.getBuffer().getHandle();
L110:             }
L111:         }
L112:         else
L113:         {
L114:             ASSERT(contextVk->getFeatures().emulateTransformFeedback.enabled);
L115:             RendererVk *rendererVk = contextVk->getRenderer();
L116:             const VkDeviceSize offsetAlignment =
L117:                 rendererVk->getPhysicalDeviceProperties().limits.minStorageBufferOffsetAlignment;
L118:             // Make sure there's no possible under/overflow with binding size.
L119:             static_assert(sizeof(VkDeviceSize) >= sizeof(binding.getSize()),
L120:                           "VkDeviceSize too small");
L121:             // Set the offset as close as possible to the requested offset while remaining aligned.
L122:             mAlignedBufferOffsets[bufferIndex] =
L123:                 (mBufferOffsets[bufferIndex] / offsetAlignment) * offsetAlignment;
L124:         }
L125:     }
L126:     if (contextVk->getFeatures().supportsTransformFeedbackExtension.enabled)
L127:     {
L128:         mRebindTransformFeedbackBuffer = true;
L129:     }
L130:     return contextVk->onBeginTransformFeedback(xfbBufferCount, mBufferHelpers,
L131:                                                mCounterBufferHelpers);
L132: }
L133: angle::Result TransformFeedbackVk::end(const gl::Context *context)
L134: {
L135:     ContextVk *contextVk = vk::GetImpl(context);
L136:     // If there's an active transform feedback query, accumulate the primitives drawn.
L137:     const gl::State &glState = context->getState();
L138:     gl::Query *transformFeedbackQuery =
L139:         glState.getActiveQuery(gl::QueryType::TransformFeedbackPrimitivesWritten);
L140:     if (transformFeedbackQuery && contextVk->getFeatures().emulateTransformFeedback.enabled)
L141:     {
L142:         vk::GetImpl(transformFeedbackQuery)->onTransformFeedbackEnd(mState.getPrimitivesDrawn());
L143:     }
L144:     for (angle::ObserverBinding &bufferBinding : mBufferObserverBindings)
L145:     {
L146:         bufferBinding.reset();
L147:     }
L148:     contextVk->onEndTransformFeedback();
L149:     releaseCounterBuffers(contextVk->getRenderer());
L150:     return angle::Result::Continue;
L151: }
L152: angle::Result TransformFeedbackVk::pause(const gl::Context *context)
L153: {
L154:     ContextVk *contextVk = vk::GetImpl(context);
L155:     if (contextVk->getFeatures().emulateTransformFeedback.enabled)
L156:     {
L157:         // Bind the empty buffer until we resume.
L158:         const gl::ProgramExecutable *executable = contextVk->getState().getProgramExecutable();
L159:         ASSERT(executable);
L160:         size_t xfbBufferCount = executable->getTransformFeedbackBufferCount();
L161:         const vk::BufferHelper &emptyBuffer = contextVk->getEmptyBuffer();
L162:         for (size_t xfbIndex = 0; xfbIndex < xfbBufferCount; ++xfbIndex)
L163:         {
L164:             mXFBBuffersDesc.updateTransformFeedbackBuffer(xfbIndex, emptyBuffer.getBufferSerial(),
L165:                                                           0);
L166:         }
L167:     }
L168:     return contextVk->onPauseTransformFeedback();
L169: }
L170: angle::Result TransformFeedbackVk::resume(const gl::Context *context)
L171: {
L172:     ContextVk *contextVk                    = vk::GetImpl(context);
L173:     const gl::ProgramExecutable *executable = contextVk->getState().getProgramExecutable();
L174:     ASSERT(executable);
L175:     size_t xfbBufferCount = executable->getTransformFeedbackBufferCount();
L176:     if (contextVk->getFeatures().emulateTransformFeedback.enabled)
L177:     {
L178:         initializeXFBBuffersDesc(contextVk, xfbBufferCount);
L179:     }
L180:     return contextVk->onBeginTransformFeedback(xfbBufferCount, mBufferHelpers,
L181:                                                mCounterBufferHelpers);
L182: }
L183: angle::Result TransformFeedbackVk::bindIndexedBuffer(
L184:     const gl::Context *context,
L185:     size_t index,
L186:     const gl::OffsetBindingPointer<gl::Buffer> &binding)
L187: {
L188:     ContextVk *contextVk = vk::GetImpl(context);
L189:     // Make sure the transform feedback buffers are bound to the program descriptor sets.
L190:     contextVk->invalidateCurrentTransformFeedbackBuffers();
L191:     return angle::Result::Continue;
L192: }
L193: void TransformFeedbackVk::updateDescriptorSetLayout(
L194:     ContextVk *contextVk,
L195:     const ShaderInterfaceVariableInfoMap &variableInfoMap,
L196:     size_t xfbBufferCount,
L197:     vk::DescriptorSetLayoutDesc *descSetLayoutOut) const
L198: {
L199:     if (!contextVk->getFeatures().emulateTransformFeedback.enabled)
L200:     {
L201:         return;
L202:     }
L203:     for (uint32_t bufferIndex = 0; bufferIndex < xfbBufferCount; ++bufferIndex)
L204:     {
L205:         const std::string bufferName = GetXfbBufferName(bufferIndex);
L206:         const ShaderInterfaceVariableInfo &info =
L207:             variableInfoMap.get(gl::ShaderType::Vertex, bufferName);
L208:         descSetLayoutOut->update(info.binding, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, 1,
L209:                                  VK_SHADER_STAGE_VERTEX_BIT, nullptr);
L210:     }
L211: }
L212: void TransformFeedbackVk::initDescriptorSet(ContextVk *contextVk,
L213:                                             const ShaderInterfaceVariableInfoMap &variableInfoMap,
L214:                                             size_t xfbBufferCount,
L215:                                             VkDescriptorSet descSet) const
L216: {
L217:     if (!contextVk->getFeatures().emulateTransformFeedback.enabled)
L218:     {
L219:         return;
L220:     }
L221:     VkDescriptorBufferInfo *descriptorBufferInfo =
L222:         contextVk->allocDescriptorBufferInfos(xfbBufferCount);
L223:     vk::BufferHelper *emptyBuffer = &contextVk->getEmptyBuffer();
L224:     for (size_t bufferIndex = 0; bufferIndex < xfbBufferCount; ++bufferIndex)
L225:     {
L226:         VkDescriptorBufferInfo &bufferInfo = descriptorBufferInfo[bufferIndex];
L227:         bufferInfo.buffer                  = emptyBuffer->getBuffer().getHandle();
L228:         bufferInfo.offset                  = 0;
L229:         bufferInfo.range                   = VK_WHOLE_SIZE;
L230:     }
L231:     writeDescriptorSet(contextVk, variableInfoMap, xfbBufferCount, descriptorBufferInfo, descSet);
L232: }
L233: void TransformFeedbackVk::updateDescriptorSet(ContextVk *contextVk,
L234:                                               const gl::ProgramState &programState,
L235:                                               const ShaderInterfaceVariableInfoMap &variableInfoMap,
L236:                                               VkDescriptorSet descSet) const
L237: {
L238:     if (!contextVk->getFeatures().emulateTransformFeedback.enabled)
L239:     {
L240:         return;
L241:     }
L242:     const gl::ProgramExecutable *executable = contextVk->getState().getProgramExecutable();
L243:     ASSERT(executable);
L244:     size_t xfbBufferCount = executable->getTransformFeedbackBufferCount();
L245:     ASSERT(xfbBufferCount > 0);
L246:     ASSERT(programState.getTransformFeedbackBufferMode() != GL_INTERLEAVED_ATTRIBS ||
L247:            xfbBufferCount == 1);
L248:     VkDescriptorBufferInfo *descriptorBufferInfo =
L249:         contextVk->allocDescriptorBufferInfos(xfbBufferCount);
L250:     // Update buffer descriptor binding info for output buffers
L251:     for (size_t bufferIndex = 0; bufferIndex < xfbBufferCount; ++bufferIndex)
L252:     {
L253:         VkDescriptorBufferInfo &bufferInfo = descriptorBufferInfo[bufferIndex];
L254:         bufferInfo.buffer = mBufferHandles[bufferIndex];
L255:         bufferInfo.offset = mAlignedBufferOffsets[bufferIndex];
L256:         bufferInfo.range  = mBufferSizes[bufferIndex] +
L257:                            (mBufferOffsets[bufferIndex] - mAlignedBufferOffsets[bufferIndex]);
L258:         ASSERT(bufferInfo.range != 0);
L259:     }
L260:     writeDescriptorSet(contextVk, variableInfoMap, xfbBufferCount, descriptorBufferInfo, descSet);
L261: }
L262: void TransformFeedbackVk::getBufferOffsets(ContextVk *contextVk,
L263:                                            GLint drawCallFirstVertex,
L264:                                            int32_t *offsetsOut,
L265:                                            size_t offsetsSize) const
L266: {
L267:     if (!contextVk->getFeatures().emulateTransformFeedback.enabled)
L268:     {
L269:         return;
L270:     }
L271:     GLsizeiptr verticesDrawn                = mState.getVerticesDrawn();
L272:     const gl::ProgramExecutable *executable = contextVk->getState().getProgramExecutable();
L273:     ASSERT(executable);
L274:     const std::vector<GLsizei> &bufferStrides = executable->getTransformFeedbackStrides();
L275:     size_t xfbBufferCount                     = executable->getTransformFeedbackBufferCount();
L276:     ASSERT(xfbBufferCount > 0);
L277:     // The caller should make sure the offsets array has enough space.  The maximum possible
L278:     // number of outputs is gl::IMPLEMENTATION_MAX_TRANSFORM_FEEDBACK_BUFFERS.
L279:     ASSERT(offsetsSize >= xfbBufferCount);
L280:     for (size_t bufferIndex = 0; bufferIndex < xfbBufferCount; ++bufferIndex)
L281:     {
L282:         int64_t offsetFromDescriptor =
L283:             static_cast<int64_t>(mBufferOffsets[bufferIndex] - mAlignedBufferOffsets[bufferIndex]);
L284:         int64_t drawCallVertexOffset = static_cast<int64_t>(verticesDrawn) - drawCallFirstVertex;
L285:         int64_t writeOffset =
L286:             (offsetFromDescriptor + drawCallVertexOffset * bufferStrides[bufferIndex]) /
L287:             static_cast<int64_t>(sizeof(uint32_t));
L288:         offsetsOut[bufferIndex] = static_cast<int32_t>(writeOffset);
L289:         // Assert on overflow.  For now, support transform feedback up to 2GB.
L290:         ASSERT(offsetsOut[bufferIndex] == writeOffset);
L291:     }
L292: }
L293: void TransformFeedbackVk::onSubjectStateChange(angle::SubjectIndex index,
L294:                                                angle::SubjectMessage message)
L295: {
L296:     if (message == angle::SubjectMessage::BufferVkStorageChanged)
L297:     {
L298:         ASSERT(index < mBufferObserverBindings.size());
L299:         const gl::OffsetBindingPointer<gl::Buffer> &binding = mState.getIndexedBuffer(index);
L300:         ASSERT(binding.get());
L301:         BufferVk *bufferVk = vk::GetImpl(binding.get());
L302:         ASSERT(bufferVk->isBufferValid());
L303:         VkDeviceSize bufferOffset = 0;
L304:         mBufferHelpers[index]     = &bufferVk->getBufferAndOffset(&bufferOffset);
L305:         mBufferOffsets[index]     = binding.getOffset() + bufferOffset;
L306:         mBufferSizes[index]       = gl::GetBoundBufferAvailableSize(binding);
L307:         mBufferObserverBindings[index].bind(bufferVk);
L308:         mXFBBuffersDesc.updateTransformFeedbackBuffer(
L309:             index, mBufferHelpers[index]->getBufferSerial(), mBufferOffsets[index]);
L310:         mBufferHandles[index] = mBufferHelpers[index]->getBuffer().getHandle();
L311:     }
L312: }
L313: void TransformFeedbackVk::writeDescriptorSet(ContextVk *contextVk,
L314:                                              const ShaderInterfaceVariableInfoMap &variableInfoMap,
L315:                                              size_t xfbBufferCount,
L316:                                              VkDescriptorBufferInfo *bufferInfo,
L317:                                              VkDescriptorSet descSet) const
L318: {
L319:     ASSERT(contextVk->getFeatures().emulateTransformFeedback.enabled);
L320:     const std::string bufferName = GetXfbBufferName(0);
L321:     const ShaderInterfaceVariableInfo &info =
L322:         variableInfoMap.get(gl::ShaderType::Vertex, bufferName);
L323:     VkWriteDescriptorSet &writeDescriptorInfo = contextVk->allocWriteDescriptorSet();
L324:     writeDescriptorInfo.sType                 = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
L325:     writeDescriptorInfo.dstSet                = descSet;
L326:     writeDescriptorInfo.dstBinding            = info.binding;
L327:     writeDescriptorInfo.dstArrayElement       = 0;
L328:     writeDescriptorInfo.descriptorCount       = static_cast<uint32_t>(xfbBufferCount);
L329:     writeDescriptorInfo.descriptorType        = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
L330:     writeDescriptorInfo.pImageInfo            = nullptr;
L331:     writeDescriptorInfo.pBufferInfo           = bufferInfo;
L332:     writeDescriptorInfo.pTexelBufferView      = nullptr;
L333: }
L334: }  // namespace rx

## Filter
The class that stores this reference to Vk::Buffer reassigns the Vk:Buffer handle when the Vk:Buffer's internal storage changes