# CONTEXT
You will be given a CodeQL query, CPP snippet, the containing source file, and a filter.

The CPP snippet was retrieved using the CodeQL query, a language used for static analysis. You don't have to understand the syntax of the language, but you should be able to understand the structure of the code.

# INSTRUCTION
Given the filter, determine if the source file matches the filter (1) or not (0).

# OUTPUT
Return a JSON of the following format.
{
    "explanation": <str>,
    "is_filtered": <1 or 0>
}

ONLY RETURN JSON. DO NOT PRINT ANYTHING ELSE.

# INPUT

## CodeQL Query
import cpp

class BufferVkBufferAccessCall extends FunctionCall {
  BufferVkBufferAccessCall() {
    this.getType().getName() = "BufferHelper &" and
    this.getTarget().getDeclaringType().getQualifiedName() = "rx::BufferVk"
  }
}

from AssignExpr e, BufferVkBufferAccessCall fc, FieldAccess fa
where
  fc.getEnclosingStmt().(ExprStmt).getExpr() = e and
  (
    e.getRValue().(AddressOfExpr).getOperand() = fc
    or
    e.getRValue() = fc
  ) and
  fa.getEnclosingStmt().(ExprStmt).getExpr() = e
select fc,
  "BufferVk::mBuffer is accessed through a function call to $@. The result is assigned to $@::$@.",
  fc.getTarget(), fc.getTarget().getName(), fa.getTarget().getDeclaringType(),
  fa.getTarget().getDeclaringType().getName(), fa.getTarget(), fa.getTarget().getName()

## CPP Snippet
```cpp
L59:             mBufferHelpers[bufferIndex] = &bufferVk->getBufferAndOffset(&bufferOffset);
```

## Source File
L1: //
L2: // Copyright 2016 The ANGLE Project Authors. All rights reserved.
L3: // Use of this source code is governed by a BSD-style license that can be
L4: // found in the LICENSE file.
L5: //
L6: // TransformFeedbackVk.cpp:
L7: //    Implements the class methods for TransformFeedbackVk.
L8: //
L9: #include "libANGLE/renderer/vulkan/TransformFeedbackVk.h"
L10: #include "libANGLE/Context.h"
L11: #include "libANGLE/Query.h"
L12: #include "libANGLE/renderer/glslang_wrapper_utils.h"
L13: #include "libANGLE/renderer/vulkan/BufferVk.h"
L14: #include "libANGLE/renderer/vulkan/ContextVk.h"
L15: #include "libANGLE/renderer/vulkan/FramebufferVk.h"
L16: #include "libANGLE/renderer/vulkan/ProgramVk.h"
L17: #include "libANGLE/renderer/vulkan/QueryVk.h"
L18: #include "common/debug.h"
L19: namespace rx
L20: {
L21: TransformFeedbackVk::TransformFeedbackVk(const gl::TransformFeedbackState &state)
L22:     : TransformFeedbackImpl(state),
L23:       mRebindTransformFeedbackBuffer(false),
L24:       mBufferHelpers{},
L25:       mBufferHandles{},
L26:       mBufferOffsets{},
L27:       mBufferSizes{},
L28:       mAlignedBufferOffsets{},
L29:       mCounterBufferHandles{}
L30: {}
L31: TransformFeedbackVk::~TransformFeedbackVk() {}
L32: void TransformFeedbackVk::onDestroy(const gl::Context *context)
L33: {
L34:     ASSERT(std::all_of(mCounterBufferHelpers.begin(), mCounterBufferHelpers.end(),
L35:                        [](vk::BufferHelper &counterBuffer) { return !counterBuffer.valid(); }));
L36: }
L37: void TransformFeedbackVk::releaseCounterBuffers(RendererVk *renderer)
L38: {
L39:     for (vk::BufferHelper &bufferHelper : mCounterBufferHelpers)
L40:     {
L41:         bufferHelper.release(renderer);
L42:     }
L43:     for (VkBuffer &buffer : mCounterBufferHandles)
L44:     {
L45:         buffer = VK_NULL_HANDLE;
L46:     }
L47: }
L48: void TransformFeedbackVk::initializeXFBBuffersDesc(ContextVk *contextVk, size_t xfbBufferCount)
L49: {
L50:     mXFBBuffersDesc.reset();
L51:     for (size_t bufferIndex = 0; bufferIndex < xfbBufferCount; ++bufferIndex)
L52:     {
L53:         const gl::OffsetBindingPointer<gl::Buffer> &binding = mState.getIndexedBuffer(bufferIndex);
L54:         ASSERT(binding.get());
L55:         BufferVk *bufferVk = vk::GetImpl(binding.get());
L56:         if (bufferVk->isBufferValid())
L57:         {
L58:             VkDeviceSize bufferOffset   = 0;
L59:             mBufferHelpers[bufferIndex] = &bufferVk->getBufferAndOffset(&bufferOffset);
L60:             mBufferOffsets[bufferIndex] = binding.getOffset() + bufferOffset;
L61:             mBufferSizes[bufferIndex]   = gl::GetBoundBufferAvailableSize(binding);
L62:         }
L63:         else
L64:         {
L65:             // This can happen in error conditions.
L66:             vk::BufferHelper &nullBuffer = contextVk->getEmptyBuffer();
L67:             mBufferHelpers[bufferIndex]  = &nullBuffer;
L68:             mBufferOffsets[bufferIndex]  = 0;
L69:             mBufferSizes[bufferIndex]    = nullBuffer.getSize();
L70:         }
L71:         mXFBBuffersDesc.updateTransformFeedbackBuffer(
L72:             bufferIndex, mBufferHelpers[bufferIndex]->getBufferSerial(),
L73:             mBufferOffsets[bufferIndex]);
L74:     }
L75: }
L76: angle::Result TransformFeedbackVk::begin(const gl::Context *context,
L77:                                          gl::PrimitiveMode primitiveMode)
L78: {
L79:     ContextVk *contextVk = vk::GetImpl(context);
L80:     const gl::ProgramExecutable *executable = contextVk->getState().getProgramExecutable();
L81:     ASSERT(executable);
L82:     size_t xfbBufferCount = executable->getTransformFeedbackBufferCount();
L83:     initializeXFBBuffersDesc(contextVk, xfbBufferCount);
L84:     for (size_t bufferIndex = 0; bufferIndex < xfbBufferCount; ++bufferIndex)
L85:     {
L86:         const gl::OffsetBindingPointer<gl::Buffer> &binding = mState.getIndexedBuffer(bufferIndex);
L87:         mBufferHandles[bufferIndex] = mBufferHelpers[bufferIndex]->getBuffer().getHandle();
L88:         if (contextVk->getFeatures().supportsTransformFeedbackExtension.enabled)
L89:         {
L90:             if (mCounterBufferHandles[bufferIndex] == VK_NULL_HANDLE)
L91:             {
L92:                 VkBufferCreateInfo createInfo = {};
L93:                 createInfo.sType              = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
L94:                 createInfo.size               = 16;
L95:                 createInfo.usage       = VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT;
L96:                 createInfo.sharingMode = VK_SHARING_MODE_EXCLUSIVE;
L97:                 vk::BufferHelper &bufferHelper = mCounterBufferHelpers[bufferIndex];
L98:                 ANGLE_TRY(
L99:                     bufferHelper.init(contextVk, createInfo, VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT));
L100:                 mCounterBufferHandles[bufferIndex] = bufferHelper.getBuffer().getHandle();
L101:             }
L102:         }
L103:         else
L104:         {
L105:             ASSERT(contextVk->getFeatures().emulateTransformFeedback.enabled);
L106:             RendererVk *rendererVk = contextVk->getRenderer();
L107:             const VkDeviceSize offsetAlignment =
L108:                 rendererVk->getPhysicalDeviceProperties().limits.minStorageBufferOffsetAlignment;
L109:             // Make sure there's no possible under/overflow with binding size.
L110:             static_assert(sizeof(VkDeviceSize) >= sizeof(binding.getSize()),
L111:                           "VkDeviceSize too small");
L112:             // Set the offset as close as possible to the requested offset while remaining aligned.
L113:             mAlignedBufferOffsets[bufferIndex] =
L114:                 (mBufferOffsets[bufferIndex] / offsetAlignment) * offsetAlignment;
L115:         }
L116:     }
L117:     if (contextVk->getFeatures().supportsTransformFeedbackExtension.enabled)
L118:     {
L119:         mRebindTransformFeedbackBuffer = true;
L120:     }
L121:     return contextVk->onBeginTransformFeedback(xfbBufferCount, mBufferHelpers,
L122:                                                mCounterBufferHelpers);
L123: }
L124: angle::Result TransformFeedbackVk::end(const gl::Context *context)
L125: {
L126:     ContextVk *contextVk = vk::GetImpl(context);
L127:     // If there's an active transform feedback query, accumulate the primitives drawn.
L128:     const gl::State &glState = context->getState();
L129:     gl::Query *transformFeedbackQuery =
L130:         glState.getActiveQuery(gl::QueryType::TransformFeedbackPrimitivesWritten);
L131:     if (transformFeedbackQuery && contextVk->getFeatures().emulateTransformFeedback.enabled)
L132:     {
L133:         vk::GetImpl(transformFeedbackQuery)->onTransformFeedbackEnd(mState.getPrimitivesDrawn());
L134:     }
L135:     contextVk->onEndTransformFeedback();
L136:     releaseCounterBuffers(contextVk->getRenderer());
L137:     return angle::Result::Continue;
L138: }
L139: angle::Result TransformFeedbackVk::pause(const gl::Context *context)
L140: {
L141:     ContextVk *contextVk = vk::GetImpl(context);
L142:     if (contextVk->getFeatures().emulateTransformFeedback.enabled)
L143:     {
L144:         // Bind the empty buffer until we resume.
L145:         const gl::ProgramExecutable *executable = contextVk->getState().getProgramExecutable();
L146:         ASSERT(executable);
L147:         size_t xfbBufferCount = executable->getTransformFeedbackBufferCount();
L148:         const vk::BufferHelper &emptyBuffer = contextVk->getEmptyBuffer();
L149:         for (size_t xfbIndex = 0; xfbIndex < xfbBufferCount; ++xfbIndex)
L150:         {
L151:             mXFBBuffersDesc.updateTransformFeedbackBuffer(xfbIndex, emptyBuffer.getBufferSerial(),
L152:                                                           0);
L153:         }
L154:     }
L155:     return contextVk->onPauseTransformFeedback();
L156: }
L157: angle::Result TransformFeedbackVk::resume(const gl::Context *context)
L158: {
L159:     ContextVk *contextVk                    = vk::GetImpl(context);
L160:     const gl::ProgramExecutable *executable = contextVk->getState().getProgramExecutable();
L161:     ASSERT(executable);
L162:     size_t xfbBufferCount = executable->getTransformFeedbackBufferCount();
L163:     if (contextVk->getFeatures().emulateTransformFeedback.enabled)
L164:     {
L165:         initializeXFBBuffersDesc(contextVk, xfbBufferCount);
L166:     }
L167:     return contextVk->onBeginTransformFeedback(xfbBufferCount, mBufferHelpers,
L168:                                                mCounterBufferHelpers);
L169: }
L170: angle::Result TransformFeedbackVk::bindIndexedBuffer(
L171:     const gl::Context *context,
L172:     size_t index,
L173:     const gl::OffsetBindingPointer<gl::Buffer> &binding)
L174: {
L175:     ContextVk *contextVk = vk::GetImpl(context);
L176:     // Make sure the transform feedback buffers are bound to the program descriptor sets.
L177:     contextVk->invalidateCurrentTransformFeedbackBuffers();
L178:     return angle::Result::Continue;
L179: }
L180: void TransformFeedbackVk::updateDescriptorSetLayout(
L181:     ContextVk *contextVk,
L182:     const ShaderInterfaceVariableInfoMap &variableInfoMap,
L183:     size_t xfbBufferCount,
L184:     vk::DescriptorSetLayoutDesc *descSetLayoutOut) const
L185: {
L186:     if (!contextVk->getFeatures().emulateTransformFeedback.enabled)
L187:     {
L188:         return;
L189:     }
L190:     for (uint32_t bufferIndex = 0; bufferIndex < xfbBufferCount; ++bufferIndex)
L191:     {
L192:         const std::string bufferName = GetXfbBufferName(bufferIndex);
L193:         const ShaderInterfaceVariableInfo &info =
L194:             variableInfoMap.get(gl::ShaderType::Vertex, bufferName);
L195:         descSetLayoutOut->update(info.binding, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, 1,
L196:                                  VK_SHADER_STAGE_VERTEX_BIT, nullptr);
L197:     }
L198: }
L199: void TransformFeedbackVk::initDescriptorSet(ContextVk *contextVk,
L200:                                             const ShaderInterfaceVariableInfoMap &variableInfoMap,
L201:                                             size_t xfbBufferCount,
L202:                                             VkDescriptorSet descSet) const
L203: {
L204:     if (!contextVk->getFeatures().emulateTransformFeedback.enabled)
L205:     {
L206:         return;
L207:     }
L208:     VkDescriptorBufferInfo *descriptorBufferInfo =
L209:         contextVk->allocDescriptorBufferInfos(xfbBufferCount);
L210:     vk::BufferHelper *emptyBuffer = &contextVk->getEmptyBuffer();
L211:     for (size_t bufferIndex = 0; bufferIndex < xfbBufferCount; ++bufferIndex)
L212:     {
L213:         VkDescriptorBufferInfo &bufferInfo = descriptorBufferInfo[bufferIndex];
L214:         bufferInfo.buffer                  = emptyBuffer->getBuffer().getHandle();
L215:         bufferInfo.offset                  = 0;
L216:         bufferInfo.range                   = VK_WHOLE_SIZE;
L217:     }
L218:     writeDescriptorSet(contextVk, variableInfoMap, xfbBufferCount, descriptorBufferInfo, descSet);
L219: }
L220: void TransformFeedbackVk::updateDescriptorSet(ContextVk *contextVk,
L221:                                               const gl::ProgramState &programState,
L222:                                               const ShaderInterfaceVariableInfoMap &variableInfoMap,
L223:                                               VkDescriptorSet descSet) const
L224: {
L225:     if (!contextVk->getFeatures().emulateTransformFeedback.enabled)
L226:     {
L227:         return;
L228:     }
L229:     const gl::ProgramExecutable *executable = contextVk->getState().getProgramExecutable();
L230:     ASSERT(executable);
L231:     size_t xfbBufferCount = executable->getTransformFeedbackBufferCount();
L232:     ASSERT(xfbBufferCount > 0);
L233:     ASSERT(programState.getTransformFeedbackBufferMode() != GL_INTERLEAVED_ATTRIBS ||
L234:            xfbBufferCount == 1);
L235:     VkDescriptorBufferInfo *descriptorBufferInfo =
L236:         contextVk->allocDescriptorBufferInfos(xfbBufferCount);
L237:     // Update buffer descriptor binding info for output buffers
L238:     for (size_t bufferIndex = 0; bufferIndex < xfbBufferCount; ++bufferIndex)
L239:     {
L240:         VkDescriptorBufferInfo &bufferInfo = descriptorBufferInfo[bufferIndex];
L241:         bufferInfo.buffer = mBufferHandles[bufferIndex];
L242:         bufferInfo.offset = mAlignedBufferOffsets[bufferIndex];
L243:         bufferInfo.range  = mBufferSizes[bufferIndex] +
L244:                            (mBufferOffsets[bufferIndex] - mAlignedBufferOffsets[bufferIndex]);
L245:         ASSERT(bufferInfo.range != 0);
L246:     }
L247:     writeDescriptorSet(contextVk, variableInfoMap, xfbBufferCount, descriptorBufferInfo, descSet);
L248: }
L249: void TransformFeedbackVk::getBufferOffsets(ContextVk *contextVk,
L250:                                            GLint drawCallFirstVertex,
L251:                                            int32_t *offsetsOut,
L252:                                            size_t offsetsSize) const
L253: {
L254:     if (!contextVk->getFeatures().emulateTransformFeedback.enabled)
L255:     {
L256:         return;
L257:     }
L258:     GLsizeiptr verticesDrawn                = mState.getVerticesDrawn();
L259:     const gl::ProgramExecutable *executable = contextVk->getState().getProgramExecutable();
L260:     ASSERT(executable);
L261:     const std::vector<GLsizei> &bufferStrides = executable->getTransformFeedbackStrides();
L262:     size_t xfbBufferCount                     = executable->getTransformFeedbackBufferCount();
L263:     ASSERT(xfbBufferCount > 0);
L264:     // The caller should make sure the offsets array has enough space.  The maximum possible
L265:     // number of outputs is gl::IMPLEMENTATION_MAX_TRANSFORM_FEEDBACK_BUFFERS.
L266:     ASSERT(offsetsSize >= xfbBufferCount);
L267:     for (size_t bufferIndex = 0; bufferIndex < xfbBufferCount; ++bufferIndex)
L268:     {
L269:         int64_t offsetFromDescriptor =
L270:             static_cast<int64_t>(mBufferOffsets[bufferIndex] - mAlignedBufferOffsets[bufferIndex]);
L271:         int64_t drawCallVertexOffset = static_cast<int64_t>(verticesDrawn) - drawCallFirstVertex;
L272:         int64_t writeOffset =
L273:             (offsetFromDescriptor + drawCallVertexOffset * bufferStrides[bufferIndex]) /
L274:             static_cast<int64_t>(sizeof(uint32_t));
L275:         offsetsOut[bufferIndex] = static_cast<int32_t>(writeOffset);
L276:         // Assert on overflow.  For now, support transform feedback up to 2GB.
L277:         ASSERT(offsetsOut[bufferIndex] == writeOffset);
L278:     }
L279: }
L280: void TransformFeedbackVk::writeDescriptorSet(ContextVk *contextVk,
L281:                                              const ShaderInterfaceVariableInfoMap &variableInfoMap,
L282:                                              size_t xfbBufferCount,
L283:                                              VkDescriptorBufferInfo *bufferInfo,
L284:                                              VkDescriptorSet descSet) const
L285: {
L286:     ASSERT(contextVk->getFeatures().emulateTransformFeedback.enabled);
L287:     const std::string bufferName = GetXfbBufferName(0);
L288:     const ShaderInterfaceVariableInfo &info =
L289:         variableInfoMap.get(gl::ShaderType::Vertex, bufferName);
L290:     VkWriteDescriptorSet &writeDescriptorInfo = contextVk->allocWriteDescriptorSet();
L291:     writeDescriptorInfo.sType                 = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
L292:     writeDescriptorInfo.dstSet                = descSet;
L293:     writeDescriptorInfo.dstBinding            = info.binding;
L294:     writeDescriptorInfo.dstArrayElement       = 0;
L295:     writeDescriptorInfo.descriptorCount       = static_cast<uint32_t>(xfbBufferCount);
L296:     writeDescriptorInfo.descriptorType        = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
L297:     writeDescriptorInfo.pImageInfo            = nullptr;
L298:     writeDescriptorInfo.pBufferInfo           = bufferInfo;
L299:     writeDescriptorInfo.pTexelBufferView      = nullptr;
L300: }
L301: }  // namespace rx

## Filter
The class that stores this reference to Vk::Buffer reassigns the Vk:Buffer handle when the Vk:Buffer's internal storage changes